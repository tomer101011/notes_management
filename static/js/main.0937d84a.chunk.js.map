{"version":3,"sources":["pictures/closeIcon.png","classes/Note.tsx","classes/Item.tsx","store-folder/Store.tsx","components/List.tsx","components/Form.tsx","constants/routes.tsx","components/NoteComp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Note","name","items","dateOfCreation","latestUpdateDate","this","Item","isChecked","Store","notesList","Date","doRedirect","path","changePage","to","deleteNote","index","window","confirm","splice","addNote","length","alert","push","loadList","className","itemTags","i","key","builtList","map","item","List","props","note","onClick","store","id","title","src","require","alt","toLocaleString","Form","state","loadNotes","escFunction","bind","event","keyCode","setState","document","addEventListener","removeEventListener","React","Component","observer","NoteComp","decorate","observable","action","appData","App","exact","render","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0937d84a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/closeIcon.79c96a45.png\";","import { Item } from './Item';\r\nexport class Note {\r\n    name: string\r\n    items: Item[]\r\n    dateOfCreation: Date\r\n    latestUpdateDate: Date\r\n\r\n    constructor(name: string, items: Item[], dateOfCreation: Date, latestUpdateDate: Date) {\r\n        this.name = name;\r\n        this.items = items;\r\n        this.dateOfCreation = dateOfCreation;\r\n        this.latestUpdateDate = latestUpdateDate;\r\n    }\r\n}","export class Item {\r\n    name: string\r\n    isChecked: boolean\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n        this.isChecked = false;\r\n    }\r\n}","import React from 'react';\r\nimport { Note } from '../classes/Note';\r\nimport { Item } from '../classes/Item';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nexport class Store {\r\n\r\n    notesList = [\r\n        new Note('Buy for home',\r\n            [new Item('bread'),\r\n            new Item('milk')], new Date(), new Date()),\r\n\r\n        new Note('Chores to do',\r\n            [new Item('wash dishes'),\r\n            new Item('make caffe')], new Date(), new Date()),\r\n\r\n        new Note('Do homeworks',\r\n            [new Item('Math'),\r\n            new Item('Computers')], new Date(), new Date())\r\n    ];\r\n\r\n    doRedirect = (path: string, changePage: boolean) => {\r\n        if (changePage)\r\n            return <Redirect to={path} />\r\n    }\r\n\r\n    deleteNote = (index: number) => {\r\n        if (window.confirm('Are you sure you want to delete this note?'))\r\n            this.notesList.splice(index, 1);\r\n    }\r\n\r\n    addNote = () => {\r\n        if (this.notesList.length >= 10)\r\n            alert('You have reached the maximum amount of notes');\r\n        else\r\n            this.notesList.push(new Note('New Note',\r\n                [], new Date(), new Date()));\r\n    }\r\n}","import React from 'react';\r\nimport { Note } from '../classes/Note';\r\nimport { Item } from '../classes/Item';\r\nimport { Store } from '../store-folder/Store';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n    id: number;\r\n    note: Note;\r\n    store: Store;\r\n}\r\n\r\nconst builtList = (items: Item[]) => {\r\n    let itemTags = [];\r\n    for (let i = 0; i < items.length; i++) {\r\n        if (items[i].isChecked)\r\n            itemTags.push(<li key={i} className=\"list-group-item itemStyle activeStyle\">{items[i].name}</li>);\r\n        else\r\n            itemTags.push(<li key={i} className=\"list-group-item itemStyle notActiveStyle\">{items[i].name}</li>);\r\n    }\r\n    return itemTags;\r\n}\r\n\r\nconst loadList = (items: Item[]) => {\r\n    if (items.length === 0)\r\n        return (<p className=\"messageStyle\">Click to edit note</p>);\r\n\r\n    else {\r\n        let itemTags = builtList(items);\r\n        return (\r\n            <ul className=\"list-group listStyle\">\r\n                {itemTags.map(item => { return item })}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nconst loadDate = (note: Note) => {\r\n    if (note.items.length === 0)\r\n        return (<p>Date Created- {note.dateOfCreation.toLocaleString()}</p>);\r\n\r\n    else\r\n        return (<p>Latest Update- {note.latestUpdateDate.toLocaleString()}</p>);\r\n}\r\n\r\nconst List: React.FC<IProps> = (props) => {\r\n    return (\r\n        <div className=\"col-lg-4 paddingNotes\">\r\n            <div className=\"row mx-auto nameStyle borderStyleTop\">\r\n                <div className=\"col-2\"></div>\r\n                <div className=\"col-8 autoBr noteNameStyle\">\r\n                    {props.note.name}\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <img onClick={() => props.store.deleteNote(props.id)} className=\"deleteNote\" title=\"Delete Note\" src={require(`../pictures/closeIcon.png`)} alt=\"\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"row mx-auto autoBr itemsAreaStyle\">\r\n                <div className=\"col-12\">\r\n                    <Link className=\"LinkStyle\" title=\"Edit note\" to=\"/note\">\r\n                        {loadList(props.note.items)}\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mx-auto itemsAreaStyle borderStyleBottom\">\r\n                <div className=\"col-12 dateStyle\">\r\n                    {loadDate(props.note)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default List;\r\n\r\n\r\n\r\n//  <div className=\"list-group checkbox-list-group\">\r\n//     <div className=\"list-group-item\">&nbsp;<label><input type=\"checkbox\" /><span className=\"list-group-item-text\"><i className=\"fa fa-fw\"></i> Default</span></label></div>\r\n//     <div className=\"list-group-item list-group-item-success\"><label>&nbsp;<input type=\"checkbox\" /><span className=\"list-group-item-text\"><i className=\"fa fa-fw\"></i> Success</span></label></div>\r\n//     <div className=\"list-group-item list-group-item-info\"><label>&nbsp;<input type=\"checkbox\" /><span className=\"list-group-item-text\"><i className=\"fa fa-fw\"></i> Info</span></label></div>\r\n//     <div className=\"list-group-item list-group-item-warning\"><label>&nbsp;<input type=\"checkbox\" /><span className=\"list-group-item-text\"><i className=\"fa fa-fw\"></i> Warning</span></label></div>\r\n//     <div className=\"list-group-item list-group-item-danger\"><label>&nbsp;<input type=\"checkbox\" /><span className=\"list-group-item-text\"><i className=\"fa fa-fw\"></i> Danger</span></label></div>\r\n// </div>","import React from 'react';\r\nimport List from './List';\r\nimport { Store } from '../store-folder/Store';\r\nimport { observer } from 'mobx-react';\r\nimport *  as ROUTES from '../constants/routes';\r\n\r\ninterface IState {\r\n    changePage: boolean;\r\n}\r\n\r\ninterface IProps {\r\n    store: Store;\r\n}\r\n\r\nclass Form extends React.Component<IProps, IState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.escFunction = this.escFunction.bind(this);\r\n    }\r\n\r\n    state: IState = {\r\n        changePage: false\r\n    }\r\n\r\n    escFunction(event: any) {\r\n        //if the key is ESC- code 27 or Backspace- code 8, then go to another page\r\n        if (event.keyCode === 27 /*|| event.keyCode === 8*/) {\r\n            this.setState({ changePage: true });\r\n        }\r\n    }\r\n    //if the user presses ESC, then the escFunction is triggered\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n    //Remove Listener to avoid memory leaks\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    loadNotes = () => {\r\n        return (\r\n            <div className=\"row\">\r\n                {\r\n                    this.props.store.notesList.map((note, i) =>\r\n                        <List id={i} key={i} note={note} store={this.props.store} />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.store.doRedirect(ROUTES.NOTE, this.state.changePage)}\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-12\">\r\n                        <p className=\"headerStyle\">Notes Management</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-12\">\r\n                        <button onClick={()=>this.props.store.addNote()} className=\" btn btn-success newNoteStyle\">New note</button>\r\n                    </div>\r\n                </div>\r\n                {this.loadNotes()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default observer(Form);","//All routes to the pages\r\nexport const HOME = '/';\r\nexport const NOTE = '/note'","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Store } from '../store-folder/Store';\r\nimport *  as ROUTES from '../constants/routes';\r\n\r\n// interface IState {\r\n//   review: string;\r\n//   stars: number;\r\n// }\r\n\r\ninterface IProps {\r\n    store: Store;\r\n}\r\n\r\nexport default class NoteComp extends React.Component<IProps> {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <Link to={ROUTES.HOME}>aa</Link>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport './cssFiles/NotesStyle.css';\r\nimport { Store } from './store-folder/Store';\r\nimport Form from './components/Form';\r\nimport NoteComp from './components/NoteComp';\r\nimport { decorate, observable, action/*, computed*/ } from 'mobx';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport *  as ROUTES from './constants/routes';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ndecorate(Store, {\r\n  notesList: observable, //observable are like states\r\n  deleteNote: action,// function that modifies observables\r\n  addNote: action\r\n});\r\n\r\nconst appData = new Store();\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App container\">\r\n\r\n      <Router>\r\n        {/* all routing pages */}\r\n        <Switch>\r\n          <Route exact path={ROUTES.HOME} render={(props) => <Form {...props} store={appData} />} />\r\n          <Route exact path={ROUTES.NOTE} render={(props) => <NoteComp {...props} store={appData} />} />\r\n        </Switch>\r\n      </Router>\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}